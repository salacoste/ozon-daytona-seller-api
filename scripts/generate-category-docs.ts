#!/usr/bin/env tsx

import * as fs from 'fs';
import * as path from 'path';

interface MethodInfo {
  name: string;
  description: string;
  inputType: string;
  outputType: string;
  example: string;
  httpMethod: string;
  endpoint: string;
}

interface CategoryInfo {
  name: string;
  description: string;
  methods: MethodInfo[];
  folderName: string;
}

class CategoryDocGenerator {
  private sourceDir = path.join(process.cwd(), 'src', 'categories');
  private outputDir = path.join(process.cwd(), 'daytona-ozon-api-docs');
  private categories: CategoryInfo[] = [];

  async generate(): Promise<void> {
    // eslint-disable-next-line no-console
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º API...');
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryFolders = fs.readdirSync(this.sourceDir)
      .filter(item => fs.statSync(path.join(this.sourceDir, item)).isDirectory())
      .sort();

    // eslint-disable-next-line no-console
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${categoryFolders.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π API`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (const folder of categoryFolders) {
      // eslint-disable-next-line no-console
      console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${folder}`);
      const categoryInfo = await this.processCategoryFolder(folder);
      if (categoryInfo) {
        this.categories.push(categoryInfo);
        await this.generateCategoryPage(categoryInfo);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.generateIndexPage();

    // eslint-disable-next-line no-console
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! –§–∞–π–ª–æ–≤: ${this.categories.length + 1}`);
  }

  private async processCategoryFolder(folderName: string): Promise<CategoryInfo | null> {
    const indexPath = path.join(this.sourceDir, folderName, 'index.ts');
    
    if (!fs.existsSync(indexPath)) {
      // eslint-disable-next-line no-console
      console.warn(`‚ö†Ô∏è –§–∞–π–ª index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${folderName}`);
      return null;
    }

    const fileContent = fs.readFileSync(indexPath, 'utf-8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSDoc
    const categoryMatch = fileContent.match(/\/\*\*([\s\S]*?)\*\/\s*export class (\w+)/);
    let categoryName = this.formatCategoryName(folderName);
    let description = `API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ${categoryName.toLowerCase()}`;

    if (categoryMatch) {
      const jsdocContent = categoryMatch[1];
      const nameMatch = jsdocContent.match(/\* (.+) API/);
      if (nameMatch) categoryName = nameMatch[1];
      
      const descMatch = jsdocContent.match(/\* (.+)\n/);
      if (descMatch && !descMatch[1].includes('API')) {
        description = descMatch[1];
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
    const methods = this.extractMethods(fileContent);

    return {
      name: categoryName,
      description,
      methods,
      folderName
    };
  }

  private extractMethods(fileContent: string): MethodInfo[] {
    const methods: MethodInfo[] = [];
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å JSDoc
    const methodRegex = /\/\*\*([\s\S]*?)\*\/\s*async\s+(\w+)\s*\(([\s\S]*?)\)\s*:\s*Promise<([\w<>]+)>/g;
    
    let match;
    // eslint-disable-next-line no-cond-assign
    while ((match = methodRegex.exec(fileContent)) !== null) {
      const [, jsdocContent, methodName, params, returnType] = match;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSDoc
      let description = 'API –º–µ—Ç–æ–¥';
      let example = '';
      let httpMethod = 'POST';
      let endpoint = '';

      const descMatch = jsdocContent.match(/\* (.+?)(?:\n|\*\/)/);
      if (descMatch) description = descMatch[1];

      const exampleMatch = jsdocContent.match(/@example\s+([\s\S]*?)(?=@\w+|\*\/)/);
      if (exampleMatch) example = exampleMatch[1].trim();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP –º–µ—Ç–æ–¥ –∏–∑ –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const httpRegex = /this\.httpClient\.request\s*<[^>]*>\s*\(\s*['"](\w+)['"]/;
      const httpMatchResult = fileContent.match(httpRegex);
      if (httpMatchResult) {
        httpMethod = httpMatchResult[1];
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º endpoint –∏–∑ –∫–æ–¥–∞
      const endpointRegex = /this\.httpClient\.request\s*<[^>]*>\s*\(\s*['"](\w+)['"],\s*['"]([^'"]+)['"]/;
      const endpointMatch = fileContent.match(endpointRegex);
      if (endpointMatch) {
        endpoint = endpointMatch[2];
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      let inputType = 'void';
      const paramMatch = params.match(/(\w+):\s*([\w<>[\]]+)/);
      if (paramMatch) inputType = paramMatch[2];

      methods.push({
        name: methodName,
        description,
        inputType,
        outputType: returnType,
        example,
        httpMethod,
        endpoint
      });
    }

    return methods;
  }

  private formatCategoryName(folderName: string): string {
    const nameMap: Record<string, string> = {
      'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      'barcode': '–®—Ç—Ä–∏—Ö–∫–æ–¥—ã',
      'beta-method': '–ë–µ—Ç–∞-–º–µ—Ç–æ–¥—ã',
      'brand': '–ë—Ä–µ–Ω–¥—ã',
      'cancellation': '–û—Ç–º–µ–Ω—ã',
      'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
      'certification': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      'chat': '–ß–∞—Ç',
      'delivery-fbs': '–î–æ—Å—Ç–∞–≤–∫–∞ FBS',
      'delivery-rfbs': '–î–æ—Å—Ç–∞–≤–∫–∞ rFBS',
      'digital': '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã',
      'fbo-supply-request': '–ü–æ—Å—Ç–∞–≤–∫–∏ FBO',
      'fbo': 'FBO',
      'fbs-rfbs-marks': '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ FBS/rFBS',
      'fbs': 'FBS',
      'finance': '–§–∏–Ω–∞–Ω—Å—ã',
      'pass': '–ü—Ä–æ–ø—É—Å–∫–∞',
      'polygon': '–ü–æ–ª–∏–≥–æ–Ω—ã',
      'premium': '–ü—Ä–µ–º–∏—É–º',
      'prices-stocks': '–¶–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏',
      'pricing-strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ü–µ–Ω',
      'product': '–¢–æ–≤–∞—Ä—ã',
      'promos': '–ê–∫—Ü–∏–∏',
      'quants': '–ö–≤–∞–Ω—Ç',
      'questions-answers': '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
      'report': '–û—Ç—á–µ—Ç—ã',
      'return': '–í–æ–∑–≤—Ä–∞—Ç',
      'returns': '–í–æ–∑–≤—Ä–∞—Ç—ã',
      'review': '–û—Ç–∑—ã–≤—ã',
      'rfbs-returns': '–í–æ–∑–≤—Ä–∞—Ç—ã rFBS',
      'seller-rating': '–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞',
      'supplier': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
      'warehouse': '–°–∫–ª–∞–¥'
    };

    return nameMap[folderName] || folderName;
  }

  private async generateCategoryPage(category: CategoryInfo): Promise<void> {
    const fileName = `category-${category.folderName}.html`;
    const filePath = path.join(this.outputDir, fileName);

    const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${category.name} API - OZON Seller API SDK</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .breadcrumb {
            margin-bottom: 20px;
            font-size: 14px;
            color: #666;
        }
        
        .breadcrumb a {
            color: #007bff;
            text-decoration: none;
        }
        
        .method {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .method-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .method-name {
            font-size: 1.4em;
            font-weight: 600;
            color: #007bff;
        }
        
        .http-method {
            background: #28a745;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            margin-left: 15px;
        }
        
        .endpoint {
            font-family: monospace;
            background: #f1f3f4;
            padding: 8px 12px;
            border-radius: 5px;
            margin: 10px 0;
            font-size: 0.9em;
        }
        
        .type-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 15px 0;
        }
        
        .type-box {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        
        .type-title {
            font-weight: 600;
            color: #555;
            margin-bottom: 8px;
        }
        
        .type-name {
            font-family: monospace;
            background: #e9ecef;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }
        
        .example {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 8px;
            margin-top: 15px;
            overflow-x: auto;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            line-height: 1.4;
        }
        
        .back-link {
            display: inline-block;
            background: #007bff;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 25px;
            margin-top: 30px;
            transition: background 0.3s;
        }
        
        .back-link:hover {
            background: #0056b3;
        }
        
        @media (max-width: 768px) {
            .type-info {
                grid-template-columns: 1fr;
            }
            
            .method-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .http-method {
                margin-left: 0;
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="breadcrumb">
            <a href="./api-categories-index.html">‚Üê –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ API</a>
        </div>
        
        <div class="header">
            <h1>${category.name} API</h1>
            <p>${category.description}</p>
            <p><strong>${category.methods.length}</strong> –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
        </div>
        
        ${category.methods.map(method => `
        <div class="method">
            <div class="method-header">
                <div class="method-name">${method.name}</div>
                <div class="http-method">${method.httpMethod}</div>
            </div>
            
            <p>${method.description}</p>
            
            ${method.endpoint ? `<div class="endpoint">${method.endpoint}</div>` : ''}
            
            <div class="type-info">
                <div class="type-box">
                    <div class="type-title">üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>
                    <div class="type-name">${method.inputType}</div>
                </div>
                <div class="type-box">
                    <div class="type-title">üì§ –û—Ç–≤–µ—Ç</div>
                    <div class="type-name">${method.outputType}</div>
                </div>
            </div>
            
            ${method.example ? `
            <div class="example">${this.escapeHtml(method.example)}</div>
            ` : ''}
        </div>
        `).join('')}
        
        <a href="./api-categories-index.html" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π</a>
    </div>
</body>
</html>`;

    fs.writeFileSync(filePath, html, 'utf-8');
  }

  private async generateIndexPage(): Promise<void> {
    const fileName = 'api-categories-index.html';
    const filePath = path.join(this.outputDir, fileName);

    const totalMethods = this.categories.reduce((sum, cat) => sum + cat.methods.length, 0);

    const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - OZON Seller API SDK</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 50px 20px;
            border-radius: 15px;
            margin-bottom: 40px;
            text-align: center;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        
        .stat {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: 700;
            display: block;
            margin-bottom: 5px;
        }
        
        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .category-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            text-decoration: none;
            color: inherit;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border-left: 5px solid #007bff;
        }
        
        .category-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        }
        
        .category-name {
            font-size: 1.3em;
            font-weight: 600;
            color: #007bff;
            margin-bottom: 10px;
        }
        
        .category-methods {
            color: #666;
            font-size: 0.9em;
            margin-top: 10px;
        }
        
        .back-link {
            display: inline-block;
            background: #007bff;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 25px;
            margin-bottom: 30px;
            transition: background 0.3s;
        }
        
        .back-link:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="../index.html" class="back-link">‚Üê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a>
        
        <div class="header">
            <h1>üìö API –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h1>
            <p>–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ OZON Seller API, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</p>
            
            <div class="stats">
                <div class="stat">
                    <span class="stat-number">${this.categories.length}</span>
                    <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–π API</span>
                </div>
                <div class="stat">
                    <span class="stat-number">${totalMethods}</span>
                    <span>–í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤</span>
                </div>
            </div>
        </div>
        
        <div class="categories-grid">
            ${this.categories.map(category => `
            <a href="./category-${category.folderName}.html" class="category-card">
                <div class="category-name">${category.name}</div>
                <p>${category.description}</p>
                <div class="category-methods">${category.methods.length} –º–µ—Ç–æ–¥–æ–≤</div>
            </a>
            `).join('')}
        </div>
    </div>
</body>
</html>`;

    fs.writeFileSync(filePath, html, 'utf-8');
  }

  private escapeHtml(text: string): string {
    const map: Record<string, string> = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, (m) => map[m]);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
const generator = new CategoryDocGenerator();
// eslint-disable-next-line no-console
generator.generate().catch(console.error);