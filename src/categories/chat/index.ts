/**
 * Chat API implementation
 * Generated from MCP documentation: chatapi--chunk-001.md and premium--chunk-002.md
 * Handles customer communication and chat management
 */

import { HttpClient } from '../../core/http.js';
import type { RequestOptions } from '../../core/types.js';
import type {
  ChatStartRequest,
  ChatSendMessageRequest,
  ChatSendFileRequest,
  ChatReadRequest,
  ChatHistoryV2Request,
  ChatHistoryV3Request,
  ChatListV2Request,
  ChatListV3Request,
} from '../../types/requests/chat.js';
import type {
  ChatStartResponse,
  ChatSendMessageResponse,
  ChatSendFileResponse,
  ChatReadResponse,
  ChatHistoryV2Response,
  ChatHistoryV3Response,
  ChatListV2Response,
  ChatListV3Response,
} from '../../types/responses/chat.js';

/**
 * Chat API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 * Chat API for chat and message management
 * 
 * –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Premium Plus.
 * Available for sellers with Premium Plus subscription.
 * 
 * @example
 * ```typescript
 * // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
 * const chat = await chatApi.startChat({
 *   posting_number: 'FBS-12345'
 * });
 * 
 * // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
 * await chatApi.sendMessage({
 *   chat_id: chat.result?.chat_id!,
 *   text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–∫–∞–∑–æ–º?'
 * });
 * ```
 */
export class ChatApi {
  constructor(private readonly httpClient: HttpClient) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
   * Start new chat
   * 
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
   * –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞.
   * 
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
   * - FBO ‚Äî –Ω–∞—á–∞—Ç—å —á–∞—Ç –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.
   * - FBS –∏ rFBS ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
   * 
   * @example
   * ```typescript
   * const chat = await chatApi.startChat({
   *   posting_number: 'FBS-12345'
   * });
   * 
   * console.log(`–ß–∞—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${chat.result?.chat_id}`);
   * ```
   */
  async startChat(
    request: ChatStartRequest,
    options?: RequestOptions
  ): Promise<ChatStartResponse> {
    return this.httpClient.request<ChatStartRequest, ChatStartResponse>(
      'POST',
      '/v1/chat/start',
      request,
      options
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   * Send message
   * 
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * 
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:
   * - FBO ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
   * - FBS –∏–ª–∏ rFBS ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
   *   –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * 
   * @example
   * ```typescript
   * const result = await chatApi.sendMessage({
   *   chat_id: 'chat-123',
   *   text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.'
   * });
   * 
   * if (result.result === 'ok') {
   *   console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
   * }
   * ```
   */
  async sendMessage(
    request: ChatSendMessageRequest,
    options?: RequestOptions
  ): Promise<ChatSendMessageResponse> {
    return this.httpClient.request<ChatSendMessageRequest, ChatSendMessageResponse>(
      'POST',
      '/v1/chat/send/message',
      request,
      options
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
   * Send file
   * 
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
   * 
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
   * 
   * @example
   * ```typescript
   * const fileData = btoa(fileContent); // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
   * 
   * const result = await chatApi.sendFile({
   *   chat_id: 'chat-123',
   *   base64_content: fileData,
   *   name: 'instruction.pdf'
   * });
   * 
   * if (result.result === 'ok') {
   *   console.log('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
   * }
   * ```
   */
  async sendFile(
    request: ChatSendFileRequest,
    options?: RequestOptions
  ): Promise<ChatSendFileResponse> {
    return this.httpClient.request<ChatSendFileRequest, ChatSendFileResponse>(
      'POST',
      '/v1/chat/send/file',
      request,
      options
    );
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   * Mark messages as read
   * 
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * 
   * @example
   * ```typescript
   * const result = await chatApi.markAsRead({
   *   chat_id: 'chat-123',
   *   from_message_id: 456
   * });
   * 
   * console.log(`–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${result.unread_count}`);
   * ```
   */
  async markAsRead(
    request: ChatReadRequest,
    options?: RequestOptions
  ): Promise<ChatReadResponse> {
    return this.httpClient.request<ChatReadRequest, ChatReadResponse>(
      'POST',
      '/v2/chat/read',
      request,
      options
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (v2)
   * Get chat history v2
   * 
   * ‚ö†Ô∏è –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getChatHistoryV3.
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä—ã–º.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
   * 
   * @example
   * ```typescript
   * const history = await chatApi.getChatHistoryV2({
   *   chat_id: 'chat-123',
   *   limit: 50,
   *   direction: 'Backward'
   * });
   * 
   * history.messages?.forEach(message => {
   *   console.log(`${message.user?.name}: ${message.data?.join(' ')}`);
   * });
   * ```
   */
  async getChatHistoryV2(
    request: ChatHistoryV2Request,
    options?: RequestOptions
  ): Promise<ChatHistoryV2Response> {
    return this.httpClient.request<ChatHistoryV2Request, ChatHistoryV2Response>(
      'POST',
      '/v2/chat/history',
      request,
      options
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (v3)
   * Get chat history v3
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä—ã–º.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
   * 
   * @example
   * ```typescript
   * const history = await chatApi.getChatHistoryV3({
   *   chat_id: 'chat-123',
   *   limit: 50,
   *   direction: 'Backward'
   * });
   * 
   * history.messages?.forEach(message => {
   *   console.log(`${message.user?.name}: ${message.data?.join(' ')}`);
   *   if (message.is_image) {
   *     console.log('üì∑ –°–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
   *   }
   * });
   * ```
   */
  async getChatHistoryV3(
    request: ChatHistoryV3Request,
    options?: RequestOptions
  ): Promise<ChatHistoryV3Response> {
    return this.httpClient.request<ChatHistoryV3Request, ChatHistoryV3Response>(
      'POST',
      '/v3/chat/history',
      request,
      options
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (v2)
   * Get chat list v2
   * 
   * ‚ö†Ô∏è –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getChatListV3.
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
   * 
   * @example
   * ```typescript
   * const chats = await chatApi.getChatListV2({
   *   limit: 100,
   *   filter: {
   *     chat_status: 'Opened',
   *     unread_only: true
   *   }
   * });
   * 
   * console.log(`–ù–∞–π–¥–µ–Ω–æ ${chats.total_chats_count} —á–∞—Ç–æ–≤`);
   * console.log(`–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${chats.total_unread_count}`);
   * ```
   */
  async getChatListV2(
    request?: ChatListV2Request,
    options?: RequestOptions
  ): Promise<ChatListV2Response> {
    return this.httpClient.request<ChatListV2Request, ChatListV2Response>(
      'POST',
      '/v2/chat/list',
      request ?? { limit: 30 },
      options
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (v3)
   * Get chat list v3
   * 
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
   * 
   * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
   * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
   * 
   * @example
   * ```typescript
   * const chats = await chatApi.getChatListV3({
   *   limit: 100,
   *   filter: {
   *     chat_status: 'Opened',
   *     unread_only: true
   *   }
   * });
   * 
   * chats.chats?.forEach(chatInfo => {
   *   console.log(`–ß–∞—Ç ${chatInfo.chat?.chat_id}: ${chatInfo.unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`);
   * });
   * 
   * // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
   * if (chats.has_next) {
   *   const nextPage = await chatApi.getChatListV3({
   *     limit: 100,
   *     cursor: chats.cursor
   *   });
   * }
   * ```
   */
  async getChatListV3(
    request?: ChatListV3Request,
    options?: RequestOptions
  ): Promise<ChatListV3Response> {
    return this.httpClient.request<ChatListV3Request, ChatListV3Response>(
      'POST',
      '/v3/chat/list',
      request ?? { limit: 30 },
      options
    );
  }
}